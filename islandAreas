import java.util.ArrayList;
/*
Zenefits 实习电面面经。

// 给定二维数组，表示一片海洋，1代表有岛，0代表没岛。返回相连岛屿的大小。

// Input:
//[["1", "0", "0", "1"],
// ["1", "0", "0", "1"],
// ["1", "1", "0", "0"]]
// Output:. visit 1point3acres.com for more.
// [4, 2]
. visit 1point3acres.com for more.
// Input:
//[["1", "1", "1", "0"],
// ["1", "0", "1", "0"],
// ["1", "1", "1", "0"]]
// Output: [8].

*/

public class Solution {
	public ArrayList<Integer> areas(int[][] board) {
		ArrayList<Integer> result = new ArrayList<Integer>();
		if (board == null) {
			return result;
		}
		boolean[][] used = new boolean[ board.length][ board[0].length];
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[0].length; j++){ 
				if (board[i][j] == 0 ) {
					continue;
				}
				int area = dfs(used, board, i, j);
				
				if (area > 0) {
					result.add(area);
				}
			}
		}
		return result;
	}
	
	public int dfs(boolean [][]used,int[][] board, int x, int y) {
		if (board[x][y] != 1 || used[x][y]) {
			return 0;
		}
		used[x][y] = true;
		int sum = 1;

		if (x != 0) {
			sum += dfs(used, board, x - 1, y);
		}
		if (x != board.length - 1) {
			sum += dfs(used, board, x + 1, y);
		}
		if (y != 0) {
			sum += dfs(used, board, x, y - 1);
		}
		if (y != board[0].length - 1) {
			sum += dfs(used, board, x, y + 1);
		}
		
		return sum;
	}
}
