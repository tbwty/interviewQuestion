
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Matcher;
//A small toolkit of classes that support lock-free thread-safe programming on single variables.
import java.util.regex.Pattern;

public class Solution{
	public void possibleMatches(String txt, String s) {
		if (s == null || s.length() == 0) {
			//return 0;
		}
		
		String regex = s.replace("+", "{2}.*?").replace("-", "{4}.*?");
		System.out.println("regex is: " + regex);
		Matcher m = Pattern.compile(regex).matcher(txt);
		int matches = 0;
		while(m.find()) {
			matches++;
			System.out.println(m.group());
		}
		int size = s.split("[\\+\\-]").length;
		//mathes: how many series that match
		//size: how many small block needs match. aa bb cccc -> 3
		//D[i][j] = D[i - 1][j] + D[i][j -1]
		int[][] D = new int[matches][size];
		Arrays.fill(D[0], 1);
		for (int i = 1; i < matches; i++) {
			D[i][0] = D[i - 1][0] + 1;
		}
		
		for (int i = 1; i < matches; i++) {
			for (int j = 1; j < size; j++) {
				D[i][j] = D[i - 1][j] + D[i][j - 1];
			}
		}
		System.out.println("Possible match number is "+ D[matches - 1][ size - 1]);
	}

	public int numberOfMatches(String s1, String s2) {
		if (s1 == null || s2 == null) {
			return 0;
		}
		ArrayList<String> s3 = transform(s2);
        for( String str: s3) {
        	System.out.println(str);
        }
		int num = withRecursionHelper(s1, s3);
		return num;
        //return 0;
	}
	public int withRecursionHelper(String s1, List<String> s2) {
		if (s2.size() == 0) {
			return 1;
		}
		if (s1.length() == 0) {
			return 0;
		}
		int sum = 0;
		int index = s1.indexOf(s2.get(0));
		if (index >= 0) {
			sum = withRecursionHelper(s1.substring(index + s2.get(0).length()), s2)	+ withRecursionHelper(s1.substring(index + s2.get(0).length()), s2.subList(1, s2.size()));
		}
		return sum;
	}
	
   public ArrayList<String> transform(String s) {
	   StringBuilder sb = new StringBuilder();
	   ArrayList<String> result = new ArrayList<String>();
	   char prev = s.charAt(0);
	   for (int i = 0; i < s.length(); i++) {
		   char c = s.charAt(i);
		   if (c == '+') {
			   sb.append(prev);
			   result.add(sb.toString());
		   } else if (c == '-') {
			   sb.append(prev).append(prev).append(prev);
			   result.add(sb.toString());
		   } else {
			   sb = new StringBuilder();
			   sb.append(c);
			   prev = c;
		   } 
	   }

	   return result;
   }	
	
}




import java.util.ArrayList;
import java.util.Scanner;
// TEST
public class testing {
	public static void main(String[] args){
		Solution tmp = new Solution();
		//String s1 = "waeginsapnaabangpisebbasepgnccccapisdnfngaabndlrjngeuiogbbegbuoeccccaabndlrjngeuiogbbegbuoecccc";
		//String s1 ="waeginsapnaabangpisebbasepgnccccapisdnfngaabndlrjngeuiogbbegbuoecccc";
		//String s2 = "a+b+c-d";
		System.out.print ("Enter the text: ");
		Scanner sc1 = new Scanner(System.in);
		String s1 = sc1.nextLine();
		System.out.print ("Enter the regex: ");
		Scanner sc2 = new Scanner(System.in);
		String s2 = sc2.nextLine();
		System.out.println("string s1 is "+ s1);
		System.out.println("string s2 is "+ s2);
		//tmp.possibleMatches(s1, s2);
		int num = tmp.numberOfMatches(s1, s2);
		System.out.println("The number of matches is " + num);
		
	}
}



